{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://qianxiaoxinrou.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-04-18T07:50:49.137Z","updated":"2020-04-18T07:50:49.132Z","comments":true,"path":"404.html","permalink":"https://qianxiaoxinrou.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-04-18T07:47:25.346Z","updated":"2020-04-18T07:47:25.336Z","comments":true,"path":"about/index.html","permalink":"https://qianxiaoxinrou.github.io/about/index.html","excerpt":"","text":"下面写关于自己的内容"},{"title":"我的朋友们","date":"2020-04-18T07:50:06.549Z","updated":"2020-04-18T07:50:06.545Z","comments":true,"path":"friends/index.html","permalink":"https://qianxiaoxinrou.github.io/friends/index.html","excerpt":"这里写友链上方的内容。","text":"这里写友链上方的内容。 这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2020-04-18T07:48:52.683Z","updated":"2020-04-18T07:48:52.679Z","comments":true,"path":"tags/index.html","permalink":"https://qianxiaoxinrou.github.io/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2020-04-18T07:48:15.496Z","updated":"2020-04-18T07:48:15.490Z","comments":true,"path":"categories/index.html","permalink":"https://qianxiaoxinrou.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2020-04-18T07:49:33.954Z","updated":"2020-04-18T07:49:33.948Z","comments":true,"path":"mylist/index.html","permalink":"https://qianxiaoxinrou.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"docker 学习笔记 | 持续更新~~~","slug":"docker-学习笔记-持续更新","date":"2020-04-18T12:27:05.000Z","updated":"2020-04-18T12:28:00.217Z","comments":true,"path":"2020/04/18/docker-学习笔记-持续更新/","link":"","permalink":"https://qianxiaoxinrou.github.io/2020/04/18/docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/","excerpt":"列出了docker常见的命令，及一些个人总结的知识点","text":"列出了docker常见的命令，及一些个人总结的知识点 镜像命令 查看本地镜像 1docker images -a：显示所有镜像 -q：显示镜像id 查找 在dockerhub上寻找 1docker search tomcat -s：列出收藏数大于指定数量 下载镜像 1docker pull tomcat 默认是tomcat:latest 删除镜像 1docker rmi tomcat / 镜像ID 删除单个的情况，版本号不写默认是latest，删除多个可以用空格隔开 -f：强制删除 1docker rmi -f $(docker images -qa) 删除本机全部镜像 生成镜像 方式1： 1docker commit tomcat 当前正在运行的容器实例 命名空间/镜像名:版本编号 根据容器实例生成镜像 -m：描述信息 -a：作者 方式2： 1docker build -f Dockerfile路径 -t 命名空间/镜像名 . 根据Dockerfile生成镜像 -f：Dockerfile路径 -t：镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。 .：当前路径 查看镜像历史 1docker history 镜像id 容器命令 创建一个新的容器并运行一个命令 1docker run centos 本地有镜像的话则运行本地镜像，本地没有镜像的话则会去hub上pull -i：已交互的方式运行容器，通常都是配合-t参数使用 -t：为容器重新分配一个伪终端 --name：别名 -d：后台运行容器，并返回容器id，即启动守护式容器 -p：主机端口:docker容器端口 -P：随机分配端口 -v：绑定一个卷，主机路径:容器路径 --rm：运行结束时自动销毁 --restart：设置容器重启策略，no，默认策略，在容器退出时不重启容器；on-failure，在容器非正常退出时（退出状态非0），才会重启容器；on-failure:3，在容器非正常退出时重启容器，最多重启3次；always，在容器退出时总是重启容器；unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器 值得说明的是，docker容器实例在后台运行，就必须要有一个前台进程，如果容器运行的不是那些一直挂起的命令，那么docker则会自动退出 启动一个或多个已经被停止的容器 1docker start centos 通常用来启动已经停止的容器 列出当前运行的所有容器 1docker ps -a：正在运行和历史上运行过得容器 -l：上次运行的容器实例 -n：最近n个创建的容器 -q：只显示容器id 退出容器 方式1： 1exit 关闭容器，无法再次进入 方式2： Ctrl + p + q 关闭容器之后还可以再次进入 重启容器 1docker restart centos 停止容器 方式1： 1docker stop centos 正常停止 方式2： 1docker kill centos 强制停止，类似于拔电源 删除容器 1docker rm centos 删除单个 -f：强制删除 删除多个 方式1： 1docker rm -f $(docker ps -aq) 方式： 1docker ps -aq | xargs docker rm -f 查看日志 1docker logs centos -t：时间 -f：跟随最新的日志 --tail：显示最后多少条 查看容器内运行的进程 1docker top centos 查看容器内部的细节 1docker inspect centos 重新进入docker进行交互 方式1： 1docker attach centos 直接进入容器启动的命令行终端，不会启动新的进程 方式2： 1docker exec centos 不进入容器却能够和容器交互 如果使用docker exec centos -it /bin/bash的话，则效果和docker attach centos相同 拷贝文件到宿主机 1docker cp centos:/tmp/yum.log /root 将docker中/tmp/yum.log文件拷贝到宿主机/root中 数据卷 添加数据卷 方式1： 使用直接命令的方式 1docker run -it -v /宿主机绝对路径:/容器内目录 镜像名 容器退出后，主机修改共享文件后，docker容器中文件也会被修改 查看数据卷和容器是否绑定成功 1docker inspect 容器id 在返回的json串中，查看volume属性 设置权限 1docker run -it -v /宿主机绝对路径:/容器内目录:ro 镜像名 ro：read only（只读） 出现Permission denied错误 增加--privileged=true参数 方式2： 使用Dokcerfile添加，Dockerfile是对docker中镜像的描述。在Dockerfile中增加一下代码VOLUME [&quot;/data1&quot;, &quot;/data2&quot;]，值得注意的是， 通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的 拷贝文件到容器 方式1: 1docker cp /www/runoob 96f7f14e99ab:/www/ 将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下 方式2: 1docker cp /www/runoob 96f7f14e99ab:/www 将主机/www/runoob目录拷贝到容器96f7f14e99ab中，目录重命名为www 方式3: 1docker cp 96f7f14e99ab:/www /tmp/ 将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中 数据卷容器使用一个容器作为父容器，专门用来存放数据 1docker run -it --volumes-from 父容器id 子容器id 容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止 Dockerfile保留字指令 FROM：当前镜像是基于那个镜像的 MAINTAINER：镜像作者及作者邮箱 RUN：容器构建时所需要执行的命令 EXPOSE：当前容器对外暴露出的端口 WORKDIR：创建容器后，终端默认进来的工作目录 ARG：构建参数和 ENV 的效果一样，都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history 还是可以看到所有值的。 ENV：设置环境变量，在这之后的RUN指令都可以使用该变量 ADD：拷贝（COPY） + 解压缩 COPY：直接拷贝 1COPY src dest VOLUME：容器数据卷，主机路径:容器路径 CMD：容器启动时要运行的命令。CMD指令可以有多个，但只有最后一个会生效，CMD会被docker run之后的参数替换（命令参数会被覆盖） ENTRYPOINT：容器启动时要运行的命令。（命令参数会被追加组合） ONBUILD：父镜像在子镜像build时被触发 实战篇自定义tomcat创建Dockerfile文件内容： 1234567891011121314151617181920212223# 父镜像FROM centos:7# 作者信息MAINTAINER weiguangchao&lt;3409885610@qq.com&gt;# 复制并解压ADD jdk-8u231-linux-x64.tar.gz /usr/localADD apache-tomcat-9.0.27.tar.gz /usr/local# 设置工作目录WORKDIR /usr/local/apache-tomcat-9.0.27# 设置环境变量ENV JAVA_HOME /usr/local/jdk1.8.0_231ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.27ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin# 设置对外暴露端口EXPOSE 8080# 安装结束后运行的命令CMD startup.sh &amp;&amp; tail -f /usr/local/apache-tomcat-9.0.27/logs/catalina.out 生成镜像1docker build -f Dockerfile2 -t weiguangchao/mytomcat:1.0 . 启动tomcat123456docker run \\-d \\-p 9999:8080 \\-v /root/webapps:/usr/local/apache-tomcat-9.0.27/webapps \\-v /root/logs/:/usr/local/apache-tomcat-9.0.27/logs \\容器ID 创建index.html在~/webapps创建ROOT/index.html文件 内容： 1&lt;h3&gt;ocg, I can do it!&lt;/h3&gt; 测试浏览器地址栏输入 http://192.168.153.130:9999/index.html 提交到hub这里以阿里云为例，其实阿里云镜像服务里面已经提供了相关操作的代码了 步骤1： 1docker login --username=阿里云用户名 registry.cn-shenzhen.aliyuncs.com 步骤2： 1docker tag [ImageId] registry.cn-shenzhen.aliyuncs.com/weiguangchao/mytomcat:[镜像版本号] 步骤3： 1sudo docker push registry.cn-shenzhen.aliyuncs.com/weiguangchao/mytomcat:[镜像版本号] 根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。 拉取镜像1docker pull registry.cn-shenzhen.aliyuncs.com/weiguangchao/mytomcat:[镜像版本号]","categories":[{"name":"Linux","slug":"Linux","permalink":"https://qianxiaoxinrou.github.io/categories/Linux/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://qianxiaoxinrou.github.io/tags/docker/"}]},{"title":"Spring Cloud OAuth2.0认证与授权","slug":"Spring-Cloud-OAuth2-0认证与授权","date":"2020-01-29T03:09:19.000Z","updated":"2020-04-18T08:08:29.250Z","comments":true,"path":"2020/01/29/Spring-Cloud-OAuth2-0认证与授权/","link":"","permalink":"https://qianxiaoxinrou.github.io/2020/01/29/Spring-Cloud-OAuth2-0%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83/","excerpt":"Spring Cloud OAuth2.0认证和授权","text":"Spring Cloud OAuth2.0认证和授权 OAuth2授权模式authorization_code：授权码模式第一步：客户端获取授权码客户端向认证服务器发送请求，试图获取授权码 response_type：表示授权类型，必选项，此处的值固定为”code” client_id：表示客户端的ID，必选项 redirect_uri：表示重定向URI，可选项 scope：表示申请的权限范围，可选项 state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值。 1http:&#x2F;&#x2F;localhost:5000&#x2F;uaa&#x2F;oauth&#x2F;authorize?response_type&#x3D;code&amp;client_id&#x3D;c1&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;www.ririiy.com&amp;scope&#x3D;all&amp;state&#x3D;1 第二步：用户同意授权 第三步：客户端通过授权码获取令牌第三步本是一次请求，这里为了针对性才将此拆开 1）设置客户端身份 client_id：表示客户端ID，必选项。 client_secret：表示客户端密钥，必选项 2）获取令牌 grant_type：表示使用的授权模式，必选项，此处的值固定为”authorization_code”。 code：表示上一步获得的授权码，必选项。 redirect_uri：表示重定向URI，必选项，且必须与A步骤中的该参数值保持一致。 令牌参数说明： access_token：表示访问令牌，必选项。 token_type：表示令牌类型，该值大小写不敏感，必选项，可以是bearer类型或mac类型。 expires_in：表示过期时间，单位为秒。如果省略该参数，必须其他方式设置过期时间。 refresh_token：表示更新令牌，用来获取下一次的访问令牌，可选项。 scope：表示权限范围，如果与客户端申请的范围一致，此项可省略。 由于授权码参数类似，就只在这里说明一次 password：密码模式第一步：用户向客户端提供用户名和密码客户端通过用户提供的用户名和密码向认证服务器申请令牌 第二部：客户端通过用户提供的用户名和密码以及id和密钥向认证服务器申请令牌1）设置客户端身份 client_id：表示客户端ID，必选项。 client_secret：表示客户端密钥，必选项 2）获取令牌 grant_type：表示授权类型，此处的值固定为”password”，必选项。 username：表示用户名，必选项。 password：表示用户的密码，必选项。 scope：表示权限范围，可选项。 client_credentials：客户端模式第一步：设置客户端身份 client_id：表示客户端ID，必选项。 client_secret：表示客户端密钥，必选项 第二步：获取令牌 grant_type：表示授权类型，此处的值固定为”client_credentials”，必选项。 scope：表示权限范围，可选项。 implicit：简化模式简化模式为授权码模式的简化版。即，授权码模式的第一步直接通过浏览器回显令牌 1http:&#x2F;&#x2F;localhost:5000&#x2F;uaa&#x2F;oauth&#x2F;authorize?response_type&#x3D;token&amp;client_id&#x3D;c1&amp;redirect_uri&#x3D;https:&#x2F;&#x2F;www.ririiy.com&amp;scope&#x3D;all Spring Cloud UAuth2认证和授权项目在父工程引入Spring Boot和Spring Cloud的相关依赖 123456789101112131415161718192021222324252627&lt;!-- Inherit defaults from Spring Boot --&gt;&lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Hoxton.SR1&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; 认证服务 distributed-security-uaa依赖详情 pom.xml123456789101112131415161718192021222324252627&lt;dependencies&gt; &lt;!-- eureka 客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- WEB --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Spring Cloud OAuth2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 配置文件 application.yml123456789101112131415161718192021222324252627282930server: port: 5000 servlet: context-path: /uaaspring: application: name: distributed-security-uaa security: user: name: user password: 123eureka: client: serviceUrl: defaultZone: http://localhost:3000/eureka/security: oauth2: client: client-id: c1 client-secret: 123 # 回调URL registered-redirect-uri: https://www.ririiy.com # 令牌有效时间 access-token-validity-seconds: 7200 # 两小时 # 令牌刷新时间 refresh-token-validity-seconds: 259200 # 三天 resource-ids: r1 authorization: # 放行check_token请求，便于检查access_token即令牌是否合法 check-token-access: permitAll() 开启Spring Security如果不开启Spring Security的话，则会有相关提示 创建Spring Security配置类 1234567import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;@Configurationpublic class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123;&#125; 主启动类1234567891011121314151617package com.ririiy.security.distributed.uaa;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;@SpringBootApplication@EnableDiscoveryClient@EnableAuthorizationServerpublic class UaaServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(UaaServiceApplication.class, args); &#125; &#125; 资源服务 distributed-security-resource依赖详情 pom.xml123456789101112131415161718192021222324252627&lt;dependencies&gt; &lt;!-- eureka 客户端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- WEB --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- Spring Cloud OAuth2 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 配置文件 application.yml123456789101112131415161718192021server: port: 7000 servlet: context-path: /resspring: application: name: distributed-security-reseureka: client: serviceUrl: defaultZone: http://localhost:3000/eureka/security: oauth2: resource: id: r1 # 检查token token-info-uri: http://localhost:5000/uaa/oauth/check_token # 客户端信息 client: client-id: c1 client-secret: 123 定义资源这里随便定义一个controller模拟资源 123456789101112import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RestController;@RestControllerpublic class ResourceController &#123; @GetMapping(value = \"r1\", produces = \"text/html;charset=utf-8\") public String r1() &#123; return \"r1 资源\"; &#125; &#125; 主启动类1234567891011121314151617package com.ririiy.security.distributed;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;@SpringBootApplication@EnableDiscoveryClient@EnableResourceServerpublic class ResourceServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(ResourceServiceApplication.class, args); &#125; &#125; 注册中心 distributed-security-registry依赖详情 pom.xml1234567&lt;dependencies&gt; &lt;!-- eureka 服务端 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 配置文件 application.yml12345678910111213server: port: 3000spring: application: name: distributed-security-registryeureka: instance: hostname: localhost client: registerWithEureka: false fetchRegistry: false serviceUrl: defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/ 主启动类12345678910111213import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;@EnableEurekaServer@SpringBootApplicationpublic class RegistryServiceApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(RegistryServiceApplication.class, args); &#125;&#125;","categories":[{"name":"Java","slug":"Java","permalink":"https://qianxiaoxinrou.github.io/categories/Java/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://qianxiaoxinrou.github.io/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://qianxiaoxinrou.github.io/tags/Spring-Cloud/"},{"name":"OAuth2","slug":"OAuth2","permalink":"https://qianxiaoxinrou.github.io/tags/OAuth2/"}]}],"categories":[{"name":"Linux","slug":"Linux","permalink":"https://qianxiaoxinrou.github.io/categories/Linux/"},{"name":"Java","slug":"Java","permalink":"https://qianxiaoxinrou.github.io/categories/Java/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://qianxiaoxinrou.github.io/tags/docker/"},{"name":"Spring","slug":"Spring","permalink":"https://qianxiaoxinrou.github.io/tags/Spring/"},{"name":"Spring Cloud","slug":"Spring-Cloud","permalink":"https://qianxiaoxinrou.github.io/tags/Spring-Cloud/"},{"name":"OAuth2","slug":"OAuth2","permalink":"https://qianxiaoxinrou.github.io/tags/OAuth2/"}]}